"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.SSEClient=void 0;var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),_eventsourcePolyfill=require("./eventsource-polyfill");function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}var SSEClient=exports.SSEClient=function(){function SSEClient(url){var _this=this,withCredentials=1<arguments.length&&void 0!==arguments[1]&&arguments[1],debug=2<arguments.length&&void 0!==arguments[2]&&arguments[2];if(_classCallCheck(this,SSEClient),!this._isSupported())throw new Error("EventSource not supported by your browser/system");if(SSEClient.instance||(SSEClient.instance=this),!url)throw new Error("A valid URL is required to open the EventSource connection");this.url=url,this.subscribers=[],this.debug=debug,this.withCredentials=withCredentials;try{this.evtSource=new _eventsourcePolyfill.EventSource(this.url,{withCredentials:this.withCredentials}),this.evtSource.onmessage=function(event){_this.subscribers.forEach(function(handler){"function"!=typeof handler.callbackFn||handler.eventName!==event.event&&null!==handler.eventName||(_this.debug&&console.log("Calling callback id: ",handler.id),handler.callbackFn(event))}),_this.debug&&console.log("Received Event: ",event)},this.evtSource.onerror=function(err){_this.subscribers.forEach(function(handler){"function"==typeof handler.errorFn&&handler.callbackFn(err)}),_this.debug&&console.error("Received Error: ",err)}}catch(err){return this.debug&&console.error("Exception: ",err),err}return SSEClient.instance}return _createClass(SSEClient,[{key:"close",value:function(){return this.evtSource?(this.evtSource.close(),this.subscribers=[],this.debug&&console.log("SSEClient: Connection closed"),!0):(this.debug&&console.log("SSEClient: Connection not opened"),!1)}},{key:"subscribe",value:function(cb){var event=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,error=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,id=this._id(16);return this.subscribers.push({id:id,eventName:event,callbackFn:cb,errorFn:error}),this.debug&&console.log("SSEClient: "+id+" subscribed"),id}},{key:"unsubscribe",value:function(id){var idx=this.evtSubscribers.filter(function(handler){return id===handler.id});return 0<=idx&&(this.subscribers.splice(idx,1),this.debug&&console.log("SSEClient: "+id+" unsubscribed"),!0)}},{key:"enableDebug",value:function(){return this.debug=!0,this.debug}},{key:"disableDebug",value:function(){return this.debug=!1,this.debug}},{key:"_id",value:function(){var size=0<arguments.length&&void 0!==arguments[0]?arguments[0]:8;return Math.random().toString(36).substring(2,size)+Math.random().toString(36).substring(2,size)}},{key:"_isSupported",value:function(){return void 0!==_eventsourcePolyfill.EventSource}}]),SSEClient}();